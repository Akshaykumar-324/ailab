def alpha_beta(depth, node_index, is_maximizing, values, alpha, beta):
    # Base case: if we reach a leaf node, return its value
    if depth == 0:
        return values[node_index]
    
    if is_maximizing:
        max_eval = float('-inf')
        # Evaluate children (assuming 2 children per node)
        for i in range(2):
            eval = alpha_beta(depth - 1, node_index * 2 + i, False, values, alpha, beta)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            # Prune if beta <= alpha
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = float('inf')
        # Evaluate children (assuming 2 children per node)
        for i in range(2):
            eval = alpha_beta(depth - 1, node_index * 2 + i, True, values, alpha, beta)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            # Prune if beta <= alpha
            if beta <= alpha:
                break
        return min_eval

# Example usage
if __name__ == "__main__":
    # Leaf node values (example game tree)
    values = [3, 5, 2, 9, 12, 5, 23, 23]
    # Depth of the tree (log2(len(values)) for a binary tree)
    depth = 3
    # Start with maximizing player
    result = alpha_beta(depth, 0, True, values, float('-inf'), float('inf'))
    print(f"Optimal value: {result}")

